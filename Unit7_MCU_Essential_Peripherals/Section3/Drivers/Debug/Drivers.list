
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000be8  08000be8  00010be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c48  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c48  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ac7  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000090e  00000000  00000000  00023b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006cc  00000000  00000000  0002441e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000160  00000000  00000000  00024af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000020d0  00000000  00000000  00024d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002118  00000000  00000000  00026e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007cd3  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030c13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003c4  00000000  00000000  00030c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bd0 	.word	0x08000bd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bd0 	.word	0x08000bd0

08000170 <Keypad_init>:
/* ============= Global Arrays to Store Rows and Columns of Keypad ============== */
int Keypad_Row[] = {R0, R1, R2, R3}; //rows of the keypad
int Keypad_Col[] = {C0, C1, C2, C3};//columns


void Keypad_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// ALL ROWS and COLUMNS are OUTPUT

	// Row 0
	PinCfg.GPIO_Pin_Number = R0;
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <Keypad_init+0xe4>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	4b36      	ldr	r3, [pc, #216]	; (8000254 <Keypad_init+0xe4>)
 800017c:	2204      	movs	r2, #4
 800017e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <Keypad_init+0xe4>)
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000186:	4933      	ldr	r1, [pc, #204]	; (8000254 <Keypad_init+0xe4>)
 8000188:	4833      	ldr	r0, [pc, #204]	; (8000258 <Keypad_init+0xe8>)
 800018a:	f000 fb92 	bl	80008b2 <MCAL_GPIO_Init>

	// Row 1
	PinCfg.GPIO_Pin_Number = R1;
 800018e:	4b31      	ldr	r3, [pc, #196]	; (8000254 <Keypad_init+0xe4>)
 8000190:	2202      	movs	r2, #2
 8000192:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <Keypad_init+0xe4>)
 8000196:	2204      	movs	r2, #4
 8000198:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <Keypad_init+0xe4>)
 800019c:	2201      	movs	r2, #1
 800019e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001a0:	492c      	ldr	r1, [pc, #176]	; (8000254 <Keypad_init+0xe4>)
 80001a2:	482d      	ldr	r0, [pc, #180]	; (8000258 <Keypad_init+0xe8>)
 80001a4:	f000 fb85 	bl	80008b2 <MCAL_GPIO_Init>

	// Row 2
	PinCfg.GPIO_Pin_Number = R2;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <Keypad_init+0xe4>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ae:	4b29      	ldr	r3, [pc, #164]	; (8000254 <Keypad_init+0xe4>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <Keypad_init+0xe4>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <Keypad_init+0xe4>)
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <Keypad_init+0xe8>)
 80001be:	f000 fb78 	bl	80008b2 <MCAL_GPIO_Init>

	// Row 3
	PinCfg.GPIO_Pin_Number = R3;
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <Keypad_init+0xe4>)
 80001c4:	2210      	movs	r2, #16
 80001c6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <Keypad_init+0xe4>)
 80001ca:	2204      	movs	r2, #4
 80001cc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <Keypad_init+0xe4>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001d4:	491f      	ldr	r1, [pc, #124]	; (8000254 <Keypad_init+0xe4>)
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <Keypad_init+0xe8>)
 80001d8:	f000 fb6b 	bl	80008b2 <MCAL_GPIO_Init>

	// Column 0
	PinCfg.GPIO_Pin_Number = C0;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <Keypad_init+0xe4>)
 80001de:	2220      	movs	r2, #32
 80001e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <Keypad_init+0xe4>)
 80001e4:	2204      	movs	r2, #4
 80001e6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <Keypad_init+0xe4>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <Keypad_init+0xe4>)
 80001f0:	4819      	ldr	r0, [pc, #100]	; (8000258 <Keypad_init+0xe8>)
 80001f2:	f000 fb5e 	bl	80008b2 <MCAL_GPIO_Init>

	// Column 1
	PinCfg.GPIO_Pin_Number = C1;
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <Keypad_init+0xe4>)
 80001f8:	2240      	movs	r2, #64	; 0x40
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <Keypad_init+0xe4>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <Keypad_init+0xe4>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <Keypad_init+0xe4>)
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <Keypad_init+0xe8>)
 800020c:	f000 fb51 	bl	80008b2 <MCAL_GPIO_Init>

	// Column 2
	PinCfg.GPIO_Pin_Number = C2;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <Keypad_init+0xe4>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Keypad_init+0xe4>)
 8000218:	2204      	movs	r2, #4
 800021a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <Keypad_init+0xe4>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <Keypad_init+0xe4>)
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <Keypad_init+0xe8>)
 8000226:	f000 fb44 	bl	80008b2 <MCAL_GPIO_Init>

	// Column 3
	PinCfg.GPIO_Pin_Number = C3;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <Keypad_init+0xe4>)
 800022c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000230:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <Keypad_init+0xe4>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <Keypad_init+0xe4>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <Keypad_init+0xe4>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <Keypad_init+0xe8>)
 8000242:	f000 fb36 	bl	80008b2 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000246:	21ff      	movs	r1, #255	; 0xff
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <Keypad_init+0xe8>)
 800024a:	f000 fbe3 	bl	8000a14 <MCAL_GPIO_WritePort>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40010c00 	.word	0x40010c00

0800025c <Keypad_getkey>:

// Function to get the key pressed on the Keypad
// And return it as char to send it to LCD
char Keypad_getkey(){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0

	int i,j;  // Two counters for Two loops

	// First loop : It determines the current column
	for (i = 0; i < 4; i++){
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <Keypad_getkey+0x176>

		/* --- All Column PINS are SET to 1, Once a PIN is pressed it will RESET --- */
		// Set Column 0
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Col[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <Keypad_getkey+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <Keypad_getkey+0x18c>)
 8000274:	f000 fbb7 	bl	80009e6 <MCAL_GPIO_WritePin>
		// Set Column 1
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Col[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <Keypad_getkey+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <Keypad_getkey+0x18c>)
 8000284:	f000 fbaf 	bl	80009e6 <MCAL_GPIO_WritePin>
		// Set Column 2
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Col[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <Keypad_getkey+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <Keypad_getkey+0x18c>)
 8000294:	f000 fba7 	bl	80009e6 <MCAL_GPIO_WritePin>
		// Set Column 3
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Col[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <Keypad_getkey+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <Keypad_getkey+0x18c>)
 80002a4:	f000 fb9f 	bl	80009e6 <MCAL_GPIO_WritePin>
		// Set Column i

		// This line of code CHECKS for the PIN pressed
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Col[i], GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <Keypad_getkey+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <Keypad_getkey+0x18c>)
 80002b8:	f000 fb95 	bl	80009e6 <MCAL_GPIO_WritePin>

		// Second loop : It determines the current row
		// within the current column
		for(j = 0; j < 4; j++){
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <Keypad_getkey+0x168>
			// Read PIN Pressed
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]) == 0)
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <Keypad_getkey+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <Keypad_getkey+0x18c>)
 80002d0:	f000 fb72 	bl	80009b8 <MCAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <Keypad_getkey+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]));  // single pressing
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <Keypad_getkey+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <Keypad_getkey+0x18c>)
 80002ea:	f000 fb65 	bl	80009b8 <MCAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d1f3      	bne.n	80002dc <Keypad_getkey+0x80>
				switch(i){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <Keypad_getkey+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <Keypad_getkey+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
					case (0):
						if (j == 0) return '7';
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <Keypad_getkey+0xbe>
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 1) return '4';
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <Keypad_getkey+0xc8>
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 2) return '1';
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <Keypad_getkey+0xd2>
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 3) return '?';
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d13d      	bne.n	80003b0 <Keypad_getkey+0x154>
 8000334:	233f      	movs	r3, #63	; 0x3f
 8000336:	e051      	b.n	80003dc <Keypad_getkey+0x180>
						break;
					case (1):
						if (j == 0) return '8';
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <Keypad_getkey+0xe6>
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 1) return '5';
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <Keypad_getkey+0xf0>
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 2) return '2';
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <Keypad_getkey+0xfa>
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 3) return '0';
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d12b      	bne.n	80003b4 <Keypad_getkey+0x158>
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <Keypad_getkey+0x180>
						break;
					case (2):
						if (j == 0) return '9';
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <Keypad_getkey+0x10e>
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 1) return '6';
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <Keypad_getkey+0x118>
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 2) return '3';
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <Keypad_getkey+0x122>
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 3) return '=';
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d119      	bne.n	80003b8 <Keypad_getkey+0x15c>
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <Keypad_getkey+0x180>
						break;
					case (3):
						if (j == 0) return '/';
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <Keypad_getkey+0x136>
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 1) return '*';
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <Keypad_getkey+0x140>
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 2) return '-';
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <Keypad_getkey+0x14a>
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <Keypad_getkey+0x180>
						else if (j == 3) return '+';
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d107      	bne.n	80003bc <Keypad_getkey+0x160>
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <Keypad_getkey+0x180>
						break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <Keypad_getkey+0x162>
						break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <Keypad_getkey+0x162>
						break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <Keypad_getkey+0x162>
						break;
 80003bc:	bf00      	nop
		for(j = 0; j < 4; j++){
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80003da:	2341      	movs	r3, #65	; 0x41
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <delay_ms>:

/* ========== Functions Defintions ========== */

// Function to make delay_ms 1ms
void delay_ms(uint32_t delay)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0;i < delay; i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00b      	b.n	8000416 <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	e002      	b.n	800040a <delay_ms+0x1a>
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3301      	adds	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2bfe      	cmp	r3, #254	; 0xfe
 800040e:	d9f9      	bls.n	8000404 <delay_ms+0x14>
	for (i = 0;i < delay; i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3ef      	bcc.n	80003fe <delay_ms+0xe>
	}

}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <LCD_GPIO_init>:

// Initialize GPIO for LCD
void LCD_GPIO_init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	// =================== Set CTRL Switches to Output ===========================================

	//RS_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = RS_SWITCH;
 800042c:	4b52      	ldr	r3, [pc, #328]	; (8000578 <LCD_GPIO_init+0x150>)
 800042e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000432:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000434:	4b50      	ldr	r3, [pc, #320]	; (8000578 <LCD_GPIO_init+0x150>)
 8000436:	2204      	movs	r2, #4
 8000438:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800043a:	4b4f      	ldr	r3, [pc, #316]	; (8000578 <LCD_GPIO_init+0x150>)
 800043c:	2201      	movs	r2, #1
 800043e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000440:	494d      	ldr	r1, [pc, #308]	; (8000578 <LCD_GPIO_init+0x150>)
 8000442:	484e      	ldr	r0, [pc, #312]	; (800057c <LCD_GPIO_init+0x154>)
 8000444:	f000 fa35 	bl	80008b2 <MCAL_GPIO_Init>

	//RW_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = RW_SWITCH;
 8000448:	4b4b      	ldr	r3, [pc, #300]	; (8000578 <LCD_GPIO_init+0x150>)
 800044a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800044e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <LCD_GPIO_init+0x150>)
 8000452:	2204      	movs	r2, #4
 8000454:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000456:	4b48      	ldr	r3, [pc, #288]	; (8000578 <LCD_GPIO_init+0x150>)
 8000458:	2201      	movs	r2, #1
 800045a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 800045c:	4946      	ldr	r1, [pc, #280]	; (8000578 <LCD_GPIO_init+0x150>)
 800045e:	4847      	ldr	r0, [pc, #284]	; (800057c <LCD_GPIO_init+0x154>)
 8000460:	f000 fa27 	bl	80008b2 <MCAL_GPIO_Init>

	//Enable_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = ENABLE_SWITCH;
 8000464:	4b44      	ldr	r3, [pc, #272]	; (8000578 <LCD_GPIO_init+0x150>)
 8000466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800046c:	4b42      	ldr	r3, [pc, #264]	; (8000578 <LCD_GPIO_init+0x150>)
 800046e:	2204      	movs	r2, #4
 8000470:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <LCD_GPIO_init+0x150>)
 8000474:	2201      	movs	r2, #1
 8000476:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000478:	493f      	ldr	r1, [pc, #252]	; (8000578 <LCD_GPIO_init+0x150>)
 800047a:	4840      	ldr	r0, [pc, #256]	; (800057c <LCD_GPIO_init+0x154>)
 800047c:	f000 fa19 	bl	80008b2 <MCAL_GPIO_Init>

	// =================== Set LCD Port to Output with Speed 10 MHz (push-pull) mode ==============
	// PIN 0
	PinCfg.GPIO_Pin_Number = GPIO_PIN_0;
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <LCD_GPIO_init+0x150>)
 8000482:	2201      	movs	r2, #1
 8000484:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000486:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <LCD_GPIO_init+0x150>)
 8000488:	2204      	movs	r2, #4
 800048a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800048c:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <LCD_GPIO_init+0x150>)
 800048e:	2201      	movs	r2, #1
 8000490:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000492:	4939      	ldr	r1, [pc, #228]	; (8000578 <LCD_GPIO_init+0x150>)
 8000494:	4839      	ldr	r0, [pc, #228]	; (800057c <LCD_GPIO_init+0x154>)
 8000496:	f000 fa0c 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 1
	PinCfg.GPIO_Pin_Number = GPIO_PIN_1;
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <LCD_GPIO_init+0x150>)
 800049c:	2202      	movs	r2, #2
 800049e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <LCD_GPIO_init+0x150>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <LCD_GPIO_init+0x150>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80004ac:	4932      	ldr	r1, [pc, #200]	; (8000578 <LCD_GPIO_init+0x150>)
 80004ae:	4833      	ldr	r0, [pc, #204]	; (800057c <LCD_GPIO_init+0x154>)
 80004b0:	f000 f9ff 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 2
	PinCfg.GPIO_Pin_Number = GPIO_PIN_2;
 80004b4:	4b30      	ldr	r3, [pc, #192]	; (8000578 <LCD_GPIO_init+0x150>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <LCD_GPIO_init+0x150>)
 80004bc:	2204      	movs	r2, #4
 80004be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <LCD_GPIO_init+0x150>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80004c6:	492c      	ldr	r1, [pc, #176]	; (8000578 <LCD_GPIO_init+0x150>)
 80004c8:	482c      	ldr	r0, [pc, #176]	; (800057c <LCD_GPIO_init+0x154>)
 80004ca:	f000 f9f2 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 3
	PinCfg.GPIO_Pin_Number = GPIO_PIN_3;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <LCD_GPIO_init+0x150>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <LCD_GPIO_init+0x150>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <LCD_GPIO_init+0x150>)
 80004dc:	2201      	movs	r2, #1
 80004de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80004e0:	4925      	ldr	r1, [pc, #148]	; (8000578 <LCD_GPIO_init+0x150>)
 80004e2:	4826      	ldr	r0, [pc, #152]	; (800057c <LCD_GPIO_init+0x154>)
 80004e4:	f000 f9e5 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 4
	PinCfg.GPIO_Pin_Number = GPIO_PIN_4;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <LCD_GPIO_init+0x150>)
 80004ea:	2210      	movs	r2, #16
 80004ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <LCD_GPIO_init+0x150>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <LCD_GPIO_init+0x150>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80004fa:	491f      	ldr	r1, [pc, #124]	; (8000578 <LCD_GPIO_init+0x150>)
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <LCD_GPIO_init+0x154>)
 80004fe:	f000 f9d8 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 5
	PinCfg.GPIO_Pin_Number = GPIO_PIN_5;
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <LCD_GPIO_init+0x150>)
 8000504:	2220      	movs	r2, #32
 8000506:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <LCD_GPIO_init+0x150>)
 800050a:	2204      	movs	r2, #4
 800050c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <LCD_GPIO_init+0x150>)
 8000510:	2201      	movs	r2, #1
 8000512:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <LCD_GPIO_init+0x150>)
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <LCD_GPIO_init+0x154>)
 8000518:	f000 f9cb 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 6
	PinCfg.GPIO_Pin_Number = GPIO_PIN_6;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <LCD_GPIO_init+0x150>)
 800051e:	2240      	movs	r2, #64	; 0x40
 8000520:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <LCD_GPIO_init+0x150>)
 8000524:	2204      	movs	r2, #4
 8000526:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <LCD_GPIO_init+0x150>)
 800052a:	2201      	movs	r2, #1
 800052c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 800052e:	4912      	ldr	r1, [pc, #72]	; (8000578 <LCD_GPIO_init+0x150>)
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <LCD_GPIO_init+0x154>)
 8000532:	f000 f9be 	bl	80008b2 <MCAL_GPIO_Init>

	// PIN 7
	PinCfg.GPIO_Pin_Number = GPIO_PIN_7;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <LCD_GPIO_init+0x150>)
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <LCD_GPIO_init+0x150>)
 800053e:	2204      	movs	r2, #4
 8000540:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <LCD_GPIO_init+0x150>)
 8000544:	2201      	movs	r2, #1
 8000546:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000548:	490b      	ldr	r1, [pc, #44]	; (8000578 <LCD_GPIO_init+0x150>)
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <LCD_GPIO_init+0x154>)
 800054c:	f000 f9b1 	bl	80008b2 <MCAL_GPIO_Init>

	// RESET ENABLE_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <LCD_GPIO_init+0x154>)
 8000558:	f000 fa45 	bl	80009e6 <MCAL_GPIO_WritePin>
	// RESET RS_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <LCD_GPIO_init+0x154>)
 8000564:	f000 fa3f 	bl	80009e6 <MCAL_GPIO_WritePin>
	// RESET RW_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_GPIO_init+0x154>)
 8000570:	f000 fa39 	bl	80009e6 <MCAL_GPIO_WritePin>

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000003c 	.word	0x2000003c
 800057c:	40010800 	.word	0x40010800

08000580 <LCD_clear_screen>:

// Function to clear screen of LCD
void LCD_clear_screen(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	LCD_write_command(LCD_CLEAR_SCREEN);  // LCD_CLEAR_SCREEN is a Macro
 8000584:	2001      	movs	r0, #1
 8000586:	f000 f857 	bl	8000638 <LCD_write_command>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <LCD_kick>:

// Kick Start of LED
void LCD_kick(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	// set Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <LCD_kick+0x28>)
 800059c:	f000 fa23 	bl	80009e6 <MCAL_GPIO_WritePin>

	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	delay_ms(50);
 80005a0:	2032      	movs	r0, #50	; 0x32
 80005a2:	f7ff ff25 	bl	80003f0 <delay_ms>

	// Reset Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <LCD_kick+0x28>)
 80005ae:	f000 fa1a 	bl	80009e6 <MCAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010800 	.word	0x40010800

080005bc <LCD_goTo_XY_Axis>:

void LCD_goTo_XY_Axis(unsigned char line, unsigned char position)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d108      	bne.n	80005e4 <LCD_goTo_XY_Axis+0x28>
	{
		if (position < 16 && position >= 0)
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d805      	bhi.n	80005e4 <LCD_goTo_XY_Axis+0x28>
		{
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + position);
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	3b80      	subs	r3, #128	; 0x80
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f82a 	bl	8000638 <LCD_write_command>
		}
	}
	if (line == 2)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d108      	bne.n	80005fc <LCD_goTo_XY_Axis+0x40>
	{
		if (position < 16 && position >= 0)
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d805      	bhi.n	80005fc <LCD_goTo_XY_Axis+0x40>
		{
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + position);
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	3b40      	subs	r3, #64	; 0x40
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f81e 	bl	8000638 <LCD_write_command>
		}

	}
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_init>:

// Initialize LCD
void LCD_init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	delay_ms(20);
 8000608:	2014      	movs	r0, #20
 800060a:	f7ff fef1 	bl	80003f0 <delay_ms>
	LCD_GPIO_init();
 800060e:	f7ff ff0b 	bl	8000428 <LCD_GPIO_init>
	delay_ms(15);
 8000612:	200f      	movs	r0, #15
 8000614:	f7ff feec 	bl	80003f0 <delay_ms>

	LCD_clear_screen();
 8000618:	f7ff ffb2 	bl	8000580 <LCD_clear_screen>

	LCD_write_command(LCD_FUNCTION_8BIT_2LINES);
 800061c:	2038      	movs	r0, #56	; 0x38
 800061e:	f000 f80b 	bl	8000638 <LCD_write_command>
	LCD_write_command(LCD_ENTRY_MODE);
 8000622:	2006      	movs	r0, #6
 8000624:	f000 f808 	bl	8000638 <LCD_write_command>
	LCD_write_command(LCD_BEGIN_AT_FIRST_ROW);
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	f000 f805 	bl	8000638 <LCD_write_command>
	LCD_write_command(LCD_DISP_ON_CURSOR_BLINK);
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f802 	bl	8000638 <LCD_write_command>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <LCD_write_command>:
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
}

// Function to write commands for LCD
void LCD_write_command(unsigned char command)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	/* ====== LCD is in 8 bit Mode ====== */

	// Set LCD Port using command variable
	MCAL_GPIO_WritePort(LCD_CTRL_DATA_R, command);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <LCD_write_command+0x40>)
 800064a:	f000 f9e3 	bl	8000a14 <MCAL_GPIO_WritePort>

	// Port Direction is set to Output in LCD_init()

	// Turn RS off for command mode
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <LCD_write_command+0x40>)
 8000656:	f000 f9c6 	bl	80009e6 <MCAL_GPIO_WritePin>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <LCD_write_command+0x40>)
 8000662:	f000 f9c0 	bl	80009e6 <MCAL_GPIO_WritePin>

	delay_ms(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff fec2 	bl	80003f0 <delay_ms>
	LCD_kick();
 800066c:	f7ff ff90 	bl	8000590 <LCD_kick>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010800 	.word	0x40010800

0800067c <LCD_write_char>:

void LCD_write_char(unsigned char character)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	/* ========== LCD is in 8 bit Mode ========== */

	// Set LCD Port using data variable
	MCAL_GPIO_WritePort(LCD_CTRL_DATA_R, character);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <LCD_write_char+0x40>)
 800068e:	f000 f9c1 	bl	8000a14 <MCAL_GPIO_WritePort>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <LCD_write_char+0x40>)
 800069a:	f000 f9a4 	bl	80009e6 <MCAL_GPIO_WritePin>

	// Turn RS on for data mode
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <LCD_write_char+0x40>)
 80006a6:	f000 f99e 	bl	80009e6 <MCAL_GPIO_WritePin>

	delay_ms(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff fea0 	bl	80003f0 <delay_ms>
	LCD_kick();
 80006b0:	f7ff ff6e 	bl	8000590 <LCD_kick>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010800 	.word	0x40010800

080006c0 <LCD_write_string>:

void LCD_write_string(char* string)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	// counter to avoid writing bigger word size than LCD screen
	int count = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
	while(*string > 0)
 80006cc:	e01c      	b.n	8000708 <LCD_write_string+0x48>
	{
		count++;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
		LCD_write_char(*string++);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffcd 	bl	800067c <LCD_write_char>
		if(count == 16)  // counter reached the end of the first row
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	d104      	bne.n	80006f2 <LCD_write_string+0x32>
		{
			LCD_goTo_XY_Axis(2, 0);  // line : row num 2 , starts from position 0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff ff66 	bl	80005bc <LCD_goTo_XY_Axis>
 80006f0:	e00a      	b.n	8000708 <LCD_write_string+0x48>
		}
		else if (count == 32)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b20      	cmp	r3, #32
 80006f6:	d107      	bne.n	8000708 <LCD_write_string+0x48>
		{
			LCD_clear_screen();
 80006f8:	f7ff ff42 	bl	8000580 <LCD_clear_screen>
			LCD_goTo_XY_Axis(1, 0);  // go to line 1 , position 0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff5c 	bl	80005bc <LCD_goTo_XY_Axis>
			count = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
	while(*string > 0)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1de      	bne.n	80006ce <LCD_write_string+0xe>
		}
	}
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <Init_7_segment>:

#include "S7_segment.h"

/* ============= Function Definition ============= */
void Init_7_segment (void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	// We are connecting 7 segment to Port B from PB9 to PB15
	// We will Initialize the 7 PINS as Output

	//PB9 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_9;
 800071c:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <Init_7_segment+0xcc>)
 800071e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000722:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <Init_7_segment+0xcc>)
 8000726:	2204      	movs	r2, #4
 8000728:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <Init_7_segment+0xcc>)
 800072c:	2201      	movs	r2, #1
 800072e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 8000730:	492c      	ldr	r1, [pc, #176]	; (80007e4 <Init_7_segment+0xcc>)
 8000732:	482d      	ldr	r0, [pc, #180]	; (80007e8 <Init_7_segment+0xd0>)
 8000734:	f000 f8bd 	bl	80008b2 <MCAL_GPIO_Init>

	//PB10 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_10;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <Init_7_segment+0xcc>)
 800073a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <Init_7_segment+0xcc>)
 8000742:	2204      	movs	r2, #4
 8000744:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <Init_7_segment+0xcc>)
 8000748:	2201      	movs	r2, #1
 800074a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 800074c:	4925      	ldr	r1, [pc, #148]	; (80007e4 <Init_7_segment+0xcc>)
 800074e:	4826      	ldr	r0, [pc, #152]	; (80007e8 <Init_7_segment+0xd0>)
 8000750:	f000 f8af 	bl	80008b2 <MCAL_GPIO_Init>

	//PB11 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_11;
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <Init_7_segment+0xcc>)
 8000756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <Init_7_segment+0xcc>)
 800075e:	2204      	movs	r2, #4
 8000760:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <Init_7_segment+0xcc>)
 8000764:	2201      	movs	r2, #1
 8000766:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 8000768:	491e      	ldr	r1, [pc, #120]	; (80007e4 <Init_7_segment+0xcc>)
 800076a:	481f      	ldr	r0, [pc, #124]	; (80007e8 <Init_7_segment+0xd0>)
 800076c:	f000 f8a1 	bl	80008b2 <MCAL_GPIO_Init>

	//PB12 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_12;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <Init_7_segment+0xcc>)
 8000772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000776:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <Init_7_segment+0xcc>)
 800077a:	2204      	movs	r2, #4
 800077c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <Init_7_segment+0xcc>)
 8000780:	2201      	movs	r2, #1
 8000782:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 8000784:	4917      	ldr	r1, [pc, #92]	; (80007e4 <Init_7_segment+0xcc>)
 8000786:	4818      	ldr	r0, [pc, #96]	; (80007e8 <Init_7_segment+0xd0>)
 8000788:	f000 f893 	bl	80008b2 <MCAL_GPIO_Init>

	//PB13 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_13;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <Init_7_segment+0xcc>)
 800078e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000792:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <Init_7_segment+0xcc>)
 8000796:	2204      	movs	r2, #4
 8000798:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <Init_7_segment+0xcc>)
 800079c:	2201      	movs	r2, #1
 800079e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <Init_7_segment+0xcc>)
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <Init_7_segment+0xd0>)
 80007a4:	f000 f885 	bl	80008b2 <MCAL_GPIO_Init>

	//PB14 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_14;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <Init_7_segment+0xcc>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Init_7_segment+0xcc>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <Init_7_segment+0xcc>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 80007bc:	4909      	ldr	r1, [pc, #36]	; (80007e4 <Init_7_segment+0xcc>)
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <Init_7_segment+0xd0>)
 80007c0:	f000 f877 	bl	80008b2 <MCAL_GPIO_Init>

	//PB15 is Output push-pull : Speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_15;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <Init_7_segment+0xcc>)
 80007c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <Init_7_segment+0xcc>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <Init_7_segment+0xcc>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 80007d8:	4902      	ldr	r1, [pc, #8]	; (80007e4 <Init_7_segment+0xcc>)
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <Init_7_segment+0xd0>)
 80007dc:	f000 f869 	bl	80008b2 <MCAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	40010c00 	.word	0x40010c00

080007ec <Get_CRLH_Position>:

#include "STM32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2b80      	cmp	r3, #128	; 0x80
 80007fa:	d042      	beq.n	8000882 <Get_CRLH_Position+0x96>
 80007fc:	2b80      	cmp	r3, #128	; 0x80
 80007fe:	dc11      	bgt.n	8000824 <Get_CRLH_Position+0x38>
 8000800:	2b08      	cmp	r3, #8
 8000802:	d036      	beq.n	8000872 <Get_CRLH_Position+0x86>
 8000804:	2b08      	cmp	r3, #8
 8000806:	dc06      	bgt.n	8000816 <Get_CRLH_Position+0x2a>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d02e      	beq.n	800086a <Get_CRLH_Position+0x7e>
 800080c:	2b04      	cmp	r3, #4
 800080e:	d02e      	beq.n	800086e <Get_CRLH_Position+0x82>
 8000810:	2b01      	cmp	r3, #1
 8000812:	d028      	beq.n	8000866 <Get_CRLH_Position+0x7a>
 8000814:	e047      	b.n	80008a6 <Get_CRLH_Position+0xba>
 8000816:	2b20      	cmp	r3, #32
 8000818:	d02f      	beq.n	800087a <Get_CRLH_Position+0x8e>
 800081a:	2b40      	cmp	r3, #64	; 0x40
 800081c:	d02f      	beq.n	800087e <Get_CRLH_Position+0x92>
 800081e:	2b10      	cmp	r3, #16
 8000820:	d029      	beq.n	8000876 <Get_CRLH_Position+0x8a>
 8000822:	e040      	b.n	80008a6 <Get_CRLH_Position+0xba>
 8000824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000828:	d033      	beq.n	8000892 <Get_CRLH_Position+0xa6>
 800082a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800082e:	dc09      	bgt.n	8000844 <Get_CRLH_Position+0x58>
 8000830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000834:	d029      	beq.n	800088a <Get_CRLH_Position+0x9e>
 8000836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800083a:	d028      	beq.n	800088e <Get_CRLH_Position+0xa2>
 800083c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000840:	d021      	beq.n	8000886 <Get_CRLH_Position+0x9a>
 8000842:	e030      	b.n	80008a6 <Get_CRLH_Position+0xba>
 8000844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000848:	d027      	beq.n	800089a <Get_CRLH_Position+0xae>
 800084a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084e:	dc03      	bgt.n	8000858 <Get_CRLH_Position+0x6c>
 8000850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000854:	d01f      	beq.n	8000896 <Get_CRLH_Position+0xaa>
 8000856:	e026      	b.n	80008a6 <Get_CRLH_Position+0xba>
 8000858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800085c:	d01f      	beq.n	800089e <Get_CRLH_Position+0xb2>
 800085e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000862:	d01e      	beq.n	80008a2 <Get_CRLH_Position+0xb6>
 8000864:	e01f      	b.n	80008a6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;  // 0, 1: MODE . 2, 3: CNF
 8000866:	2300      	movs	r3, #0
 8000868:	e01e      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;  // 4, 5: MODE . 6, 7: CNF
 800086a:	2304      	movs	r3, #4
 800086c:	e01c      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800086e:	2308      	movs	r3, #8
 8000870:	e01a      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000872:	230c      	movs	r3, #12
 8000874:	e018      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000876:	2310      	movs	r3, #16
 8000878:	e016      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800087a:	2314      	movs	r3, #20
 800087c:	e014      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800087e:	2318      	movs	r3, #24
 8000880:	e012      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000882:	231c      	movs	r3, #28
 8000884:	e010      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000886:	2300      	movs	r3, #0
 8000888:	e00e      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800088a:	2304      	movs	r3, #4
 800088c:	e00c      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800088e:	2308      	movs	r3, #8
 8000890:	e00a      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000892:	230c      	movs	r3, #12
 8000894:	e008      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000896:	2310      	movs	r3, #16
 8000898:	e006      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800089a:	2314      	movs	r3, #20
 800089c:	e004      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800089e:	2318      	movs	r3, #24
 80008a0:	e002      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80008a2:	231c      	movs	r3, #28
 80008a4:	e000      	b.n	80008a8 <Get_CRLH_Position+0xbc>
		break;

	}

	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <MCAL_GPIO_Init>:
 * @return value    -None
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 has only GPIO A,B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIO_PortX, GPIO_PinConfig_t* PinConfig)
{
 80008b2:	b590      	push	{r4, r7, lr}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	//Port configuration register high(GPIOx_CRH) Configure PINs from 8 >>> 15

	volatile uint32_t* ConfigRegister = NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_Pin_Number < GPIO_PIN_8)? &GPIO_PortX->CRL   : &GPIO_PortX->CRH;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d801      	bhi.n	80008d0 <MCAL_GPIO_Init+0x1e>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	e001      	b.n	80008d4 <MCAL_GPIO_Init+0x22>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3304      	adds	r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]

	//clear MODE, CNF
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_Pin_Number));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff86 	bl	80007ec <Get_CRLH_Position>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4093      	lsls	r3, r2
 80008e8:	43da      	mvns	r2, r3
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	401a      	ands	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d00f      	beq.n	800091c <MCAL_GPIO_Init+0x6a>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	2b06      	cmp	r3, #6
 8000902:	d00b      	beq.n	800091c <MCAL_GPIO_Init+0x6a>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	2b07      	cmp	r3, #7
 800090a:	d007      	beq.n	800091c <MCAL_GPIO_Init+0x6a>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	2b05      	cmp	r3, #5
 8000912:	d003      	beq.n	800091c <MCAL_GPIO_Init+0x6a>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	2b04      	cmp	r3, #4
 800091a:	d10e      	bne.n	800093a <MCAL_GPIO_Init+0x88>
	{
		//Set MODE, CNF
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	3b04      	subs	r3, #4
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	b25a      	sxtb	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	b25b      	sxtb	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b25b      	sxtb	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e02c      	b.n	8000994 <MCAL_GPIO_Init+0xe2>
	}
	//if Pin is input
	else  // MODE = 00: Input mode (reset state)
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d003      	beq.n	800094a <MCAL_GPIO_Init+0x98>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d107      	bne.n	800095a <MCAL_GPIO_Init+0xa8>
		{
			//Set MODE 00, CNF
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0X0) & 0x0F);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e01c      	b.n	8000994 <MCAL_GPIO_Init+0xe2>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //Consider it as input floating
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	789b      	ldrb	r3, [r3, #2]
 800095e:	2b08      	cmp	r3, #8
 8000960:	d102      	bne.n	8000968 <MCAL_GPIO_Init+0xb6>
		{
			//Set MODE 00, CNF
			PIN_Config = ((((GPIO_MODE_INPUT_FLOATING) << 2) | 0X0) & 0x0F);
 8000962:	2304      	movs	r3, #4
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e015      	b.n	8000994 <MCAL_GPIO_Init+0xe2>
		}
		else  //PU PD Input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PUR) << 2) | 0X0) & 0x0F);
 8000968:	2308      	movs	r3, #8
 800096a:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PUR)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d107      	bne.n	8000984 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR |= PinConfig->GPIO_Pin_Number;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	8812      	ldrh	r2, [r2, #0]
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	e007      	b.n	8000994 <MCAL_GPIO_Init+0xe2>
			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR &= ~(PinConfig->GPIO_Pin_Number);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	8812      	ldrh	r2, [r2, #0]
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60da      	str	r2, [r3, #12]

		}

	}
	//Write on the CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Number) );
 8000994:	7bfc      	ldrb	r4, [r7, #15]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff26 	bl	80007ec <Get_CRLH_Position>
 80009a0:	4603      	mov	r3, r0
 80009a2:	fa04 f203 	lsl.w	r2, r4, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}

080009b8 <MCAL_GPIO_ReadPin>:
 * @parameter[in]   -PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @return value    -the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-None
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;

	if (((GPIO_PortX->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e001      	b.n	80009da <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus = GPIO_PIN_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
	}

	return bitStatus;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <MCAL_GPIO_WritePin>:
 * @parameter[in]   -Value: Pin Value
 * @return value    -None
 * Note				-None
 */
void MCAL_GPIO_WritePin  (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber, uint8_t Value)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	807b      	strh	r3, [r7, #2]
 80009f2:	4613      	mov	r3, r2
 80009f4:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 80009f6:	787b      	ldrb	r3, [r7, #1]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y = 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIO_PortX->BSRR = (uint32_t)PinNumber;
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIO_PortX->BRR = (uint32_t)PinNumber;
	}

}
 8000a02:	e002      	b.n	8000a0a <MCAL_GPIO_WritePin+0x24>
		GPIO_PortX->BRR = (uint32_t)PinNumber;
 8000a04:	887a      	ldrh	r2, [r7, #2]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	615a      	str	r2, [r3, #20]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <MCAL_GPIO_WritePort>:
 * @parameter[in]	-GPIO_PortX: where X can be (A..E depending on device used) to select the GPIO peripheral
 * @return value    -None
 * Note				-None
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIO_PortX, uint16_t Value)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
	GPIO_PortX->ODR = (uint32_t)Value;
 8000a20:	887a      	ldrh	r2, [r7, #2]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60da      	str	r2, [r3, #12]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <main>:
void clock_init();
extern void delay_ms(uint32_t delay);

/* =========== Main Program ========== */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
	// Initializing the clock
	clock_init();
 8000a36:	f000 f869 	bl	8000b0c <clock_init>

	// Initializing the LCD
	LCD_init();
 8000a3a:	f7ff fde3 	bl	8000604 <LCD_init>

	// Initializing the 7-segment
	Init_7_segment();
 8000a3e:	f7ff fe6b 	bl	8000718 <Init_7_segment>

	LCD_write_string("HEY THERE !");
 8000a42:	482d      	ldr	r0, [pc, #180]	; (8000af8 <main+0xc8>)
 8000a44:	f7ff fe3c 	bl	80006c0 <LCD_write_string>
	delay_ms(500);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f7ff fcd0 	bl	80003f0 <delay_ms>
	LCD_clear_screen();
 8000a50:	f7ff fd96 	bl	8000580 <LCD_clear_screen>

	// Variable to check pressed key of Keypad
	unsigned char key_pressed;

	// Array to store of 7 segments shapes
	unsigned char seg_Numbers[] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000a54:	4a29      	ldr	r2, [pc, #164]	; (8000afc <main+0xcc>)
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	c303      	stmia	r3!, {r0, r1}
 8000a5e:	801a      	strh	r2, [r3, #0]
 8000a60:	3302      	adds	r3, #2
 8000a62:	0c12      	lsrs	r2, r2, #16
 8000a64:	701a      	strb	r2, [r3, #0]

	// Array to store Numbers from 1 >>> 9 to be displayed on LCD
	unsigned char LCD_Numbers[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <main+0xd0>)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6c:	c303      	stmia	r3!, {r0, r1}
 8000a6e:	801a      	strh	r2, [r3, #0]
 8000a70:	3302      	adds	r3, #2
 8000a72:	0c12      	lsrs	r2, r2, #16
 8000a74:	701a      	strb	r2, [r3, #0]

	// Loop to display the same number to LCD and 7-SEGMENT
	for (unsigned int i = 0; i < 11; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	e019      	b.n	8000ab0 <main+0x80>
	{
		// Display current number on the 7 segment
		MCAL_GPIO_WritePort(GPIO_PORTB, seg_Numbers[i] << 9);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	025b      	lsls	r3, r3, #9
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481d      	ldr	r0, [pc, #116]	; (8000b04 <main+0xd4>)
 8000a90:	f7ff ffc0 	bl	8000a14 <MCAL_GPIO_WritePort>
		// We shifted by 9 as we used the First 9 Ports for Keypad and started connecting 7 segment from PB10

		// Display current number on the LCD
		LCD_write_char(LCD_Numbers[i]);
 8000a94:	1d3a      	adds	r2, r7, #4
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fded 	bl	800067c <LCD_write_char>
		// Delay to be able to see the change in numbers
		delay_ms(1000);  // 1 second delay
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f7ff fca3 	bl	80003f0 <delay_ms>
	for (unsigned int i = 0; i < 11; i++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	d9e2      	bls.n	8000a7c <main+0x4c>
	}

	// Clear screen after displaying Numbers
	LCD_clear_screen();
 8000ab6:	f7ff fd63 	bl	8000580 <LCD_clear_screen>

	// Initializing the Keypad
	Keypad_init();
 8000aba:	f7ff fb59 	bl	8000170 <Keypad_init>

	LCD_write_string("Keypad is ready !");
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <main+0xd8>)
 8000ac0:	f7ff fdfe 	bl	80006c0 <LCD_write_string>
	delay_ms(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fc92 	bl	80003f0 <delay_ms>
	LCD_clear_screen();
 8000acc:	f7ff fd58 	bl	8000580 <LCD_clear_screen>

	while(1)
	{
		key_pressed = Keypad_getkey();
 8000ad0:	f7ff fbc4 	bl	800025c <Keypad_getkey>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	76fb      	strb	r3, [r7, #27]

		switch(key_pressed){
 8000ad8:	7efb      	ldrb	r3, [r7, #27]
 8000ada:	2b3f      	cmp	r3, #63	; 0x3f
 8000adc:	d002      	beq.n	8000ae4 <main+0xb4>
 8000ade:	2b41      	cmp	r3, #65	; 0x41
 8000ae0:	d008      	beq.n	8000af4 <main+0xc4>
 8000ae2:	e002      	b.n	8000aea <main+0xba>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000ae4:	f7ff fd4c 	bl	8000580 <LCD_clear_screen>
			break;
 8000ae8:	e005      	b.n	8000af6 <main+0xc6>
		default:
			LCD_write_char(key_pressed);
 8000aea:	7efb      	ldrb	r3, [r7, #27]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdc5 	bl	800067c <LCD_write_char>
			break;
 8000af2:	e000      	b.n	8000af6 <main+0xc6>
			break;
 8000af4:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000af6:	e7eb      	b.n	8000ad0 <main+0xa0>
 8000af8:	08000be8 	.word	0x08000be8
 8000afc:	08000c08 	.word	0x08000c08
 8000b00:	08000c14 	.word	0x08000c14
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	08000bf4 	.word	0x08000bf4

08000b0c <clock_init>:
	}
}

/* ======== clock init definition ======= */
void clock_init()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	// Enable clock of Port A
	RCC_GPIO_PORTA_CLK_EN();
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <clock_init+0x24>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <clock_init+0x24>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]

	// Enable clock of Port B
	RCC_GPIO_PORTB_CLK_EN();
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <clock_init+0x24>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <clock_init+0x24>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f000 f811 	bl	8000b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff ff63 	bl	8000a30 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b78:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000b7c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b80:	20000040 	.word	0x20000040

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <__libc_init_array>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	4e0c      	ldr	r6, [pc, #48]	; (8000bc0 <__libc_init_array+0x38>)
 8000b8e:	4c0d      	ldr	r4, [pc, #52]	; (8000bc4 <__libc_init_array+0x3c>)
 8000b90:	1ba4      	subs	r4, r4, r6
 8000b92:	10a4      	asrs	r4, r4, #2
 8000b94:	42a5      	cmp	r5, r4
 8000b96:	d109      	bne.n	8000bac <__libc_init_array+0x24>
 8000b98:	f000 f81a 	bl	8000bd0 <_init>
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	4e0a      	ldr	r6, [pc, #40]	; (8000bc8 <__libc_init_array+0x40>)
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <__libc_init_array+0x44>)
 8000ba2:	1ba4      	subs	r4, r4, r6
 8000ba4:	10a4      	asrs	r4, r4, #2
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	d105      	bne.n	8000bb6 <__libc_init_array+0x2e>
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bb0:	4798      	blx	r3
 8000bb2:	3501      	adds	r5, #1
 8000bb4:	e7ee      	b.n	8000b94 <__libc_init_array+0xc>
 8000bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bba:	4798      	blx	r3
 8000bbc:	3501      	adds	r5, #1
 8000bbe:	e7f2      	b.n	8000ba6 <__libc_init_array+0x1e>
 8000bc0:	08000c20 	.word	0x08000c20
 8000bc4:	08000c20 	.word	0x08000c20
 8000bc8:	08000c20 	.word	0x08000c20
 8000bcc:	08000c24 	.word	0x08000c24

08000bd0 <_init>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr

08000bdc <_fini>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr
