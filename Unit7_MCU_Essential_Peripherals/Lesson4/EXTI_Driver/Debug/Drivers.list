
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  4 .ARM          00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de4  08000dec  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dec  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003dfe  00000000  00000000  00010e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000987  00000000  00000000  00014c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000099c  00000000  00000000  0001559a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00015f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  000160f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002550  00000000  00000000  00016260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002187  00000000  00000000  000187b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000097d9  00000000  00000000  0001a937  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024110  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000540  00000000  00000000  0002418c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000da4 	.word	0x08000da4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000da4 	.word	0x08000da4

08000170 <delay_ms>:

/* ========== Functions Definitions ========== */

// Function to make delay_ms 1ms
void delay_ms(uint32_t delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0;i < delay; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0;i < delay; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
	}

}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

// Initialize GPIO for LCD
void LCD_GPIO_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	// =================== Set CTRL Switches to Output ===========================================

	//RS_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fca3 	bl	8000b0e <MCAL_GPIO_Init>

	//RW_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fc95 	bl	8000b0e <MCAL_GPIO_Init>

	//Enable_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinCfg.GPIO_Pin_Number = ENABLE_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fc87 	bl	8000b0e <MCAL_GPIO_Init>

	// =================== Set LCD Port to Output with Speed 10 MHz (push-pull) mode ==============
	// PIN 0
	PinCfg.GPIO_Pin_Number = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 fc7a 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 1
	PinCfg.GPIO_Pin_Number = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 fc6d 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 2
	PinCfg.GPIO_Pin_Number = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fc60 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 3
	PinCfg.GPIO_Pin_Number = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fc53 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 4
	PinCfg.GPIO_Pin_Number = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fc46 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 5
	PinCfg.GPIO_Pin_Number = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 fc39 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 6
	PinCfg.GPIO_Pin_Number = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 fc2c 	bl	8000b0e <MCAL_GPIO_Init>

	// PIN 7
	PinCfg.GPIO_Pin_Number = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_DATA_R, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 fc1f 	bl	8000b0e <MCAL_GPIO_Init>

	// RESET ENABLE_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 fc9c 	bl	8000c14 <MCAL_GPIO_WritePin>
	// RESET RS_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fc96 	bl	8000c14 <MCAL_GPIO_WritePin>
	// RESET RW_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fc90 	bl	8000c14 <MCAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000020 	.word	0x20000020
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_clear_screen>:

// Function to clear screen of LCD
void LCD_clear_screen(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_write_command(LCD_CLEAR_SCREEN);  // LCD_CLEAR_SCREEN is a Macro
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f857 	bl	80003b8 <LCD_write_command>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_kick>:

// Kick Start of LED
void LCD_kick(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	// set Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_kick+0x28>)
 800031c:	f000 fc7a 	bl	8000c14 <MCAL_GPIO_WritePin>

	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>

	// Reset Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_kick+0x28>)
 800032e:	f000 fc71 	bl	8000c14 <MCAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_goTo_XY_Axis>:

void LCD_goTo_XY_Axis(unsigned char line, unsigned char position)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <LCD_goTo_XY_Axis+0x28>
	{
		if (position < 16 && position >= 0)
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d805      	bhi.n	8000364 <LCD_goTo_XY_Axis+0x28>
		{
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + position);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b80      	subs	r3, #128	; 0x80
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f82a 	bl	80003b8 <LCD_write_command>
		}
	}
	if (line == 2)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d108      	bne.n	800037c <LCD_goTo_XY_Axis+0x40>
	{
		if (position < 16 && position >= 0)
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d805      	bhi.n	800037c <LCD_goTo_XY_Axis+0x40>
		{
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + position);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	3b40      	subs	r3, #64	; 0x40
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f81e 	bl	80003b8 <LCD_write_command>
		}

	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_init>:

// Initialize LCD
void LCD_init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	delay_ms(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
	LCD_GPIO_init();
 800038e:	f7ff ff0b 	bl	80001a8 <LCD_GPIO_init>
	delay_ms(15);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff feec 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 8000398:	f7ff ffb2 	bl	8000300 <LCD_clear_screen>

	LCD_write_command(LCD_FUNCTION_8BIT_2LINES);
 800039c:	2038      	movs	r0, #56	; 0x38
 800039e:	f000 f80b 	bl	80003b8 <LCD_write_command>
	LCD_write_command(LCD_ENTRY_MODE);
 80003a2:	2006      	movs	r0, #6
 80003a4:	f000 f808 	bl	80003b8 <LCD_write_command>
	LCD_write_command(LCD_BEGIN_AT_FIRST_ROW);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f000 f805 	bl	80003b8 <LCD_write_command>
	LCD_write_command(LCD_DISP_ON_CURSOR_BLINK);
 80003ae:	200f      	movs	r0, #15
 80003b0:	f000 f802 	bl	80003b8 <LCD_write_command>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <LCD_write_command>:
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
}

// Function to write commands for LCD
void LCD_write_command(unsigned char command)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	/* ====== LCD is in 8 bit Mode ====== */

	// Set LCD Port using command variable
	MCAL_GPIO_WritePort(LCD_CTRL_DATA_R, command);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LCD_write_command+0x40>)
 80003ca:	f000 fc3a 	bl	8000c42 <MCAL_GPIO_WritePort>

	// Port Direction is set to Output in LCD_init()

	// Turn RS off for command mode
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <LCD_write_command+0x40>)
 80003d6:	f000 fc1d 	bl	8000c14 <MCAL_GPIO_WritePin>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <LCD_write_command+0x40>)
 80003e2:	f000 fc17 	bl	8000c14 <MCAL_GPIO_WritePin>

	delay_ms(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff fec2 	bl	8000170 <delay_ms>
	LCD_kick();
 80003ec:	f7ff ff90 	bl	8000310 <LCD_kick>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_write_char>:

void LCD_write_char(unsigned char character)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	/* ========== LCD is in 8 bit Mode ========== */

	// Set LCD Port using data variable
	MCAL_GPIO_WritePort(LCD_CTRL_DATA_R, character);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	b29b      	uxth	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_write_char+0x40>)
 800040e:	f000 fc18 	bl	8000c42 <MCAL_GPIO_WritePort>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RW_SWITCH, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <LCD_write_char+0x40>)
 800041a:	f000 fbfb 	bl	8000c14 <MCAL_GPIO_WritePin>

	// Turn RS on for data mode
	MCAL_GPIO_WritePin(LCD_CTRL_DATA_R, RS_SWITCH, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_write_char+0x40>)
 8000426:	f000 fbf5 	bl	8000c14 <MCAL_GPIO_WritePin>

	delay_ms(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fea0 	bl	8000170 <delay_ms>
	LCD_kick();
 8000430:	f7ff ff6e 	bl	8000310 <LCD_kick>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_write_string>:

void LCD_write_string(char* string)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	// counter to avoid writing bigger word size than LCD screen
	int count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while(*string > 0)
 800044c:	e01c      	b.n	8000488 <LCD_write_string+0x48>
	{
		count++;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
		LCD_write_char(*string++);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcd 	bl	80003fc <LCD_write_char>
		if(count == 16)  // counter reached the end of the first row
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b10      	cmp	r3, #16
 8000466:	d104      	bne.n	8000472 <LCD_write_string+0x32>
		{
			LCD_goTo_XY_Axis(2, 0);  // line : row num 2 , starts from position 0
 8000468:	2100      	movs	r1, #0
 800046a:	2002      	movs	r0, #2
 800046c:	f7ff ff66 	bl	800033c <LCD_goTo_XY_Axis>
 8000470:	e00a      	b.n	8000488 <LCD_write_string+0x48>
		}
		else if (count == 32)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d107      	bne.n	8000488 <LCD_write_string+0x48>
		{
			LCD_clear_screen();
 8000478:	f7ff ff42 	bl	8000300 <LCD_clear_screen>
			LCD_goTo_XY_Axis(1, 0);  // go to line 1 , position 0
 800047c:	2100      	movs	r1, #0
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff5c 	bl	800033c <LCD_goTo_XY_Axis>
			count = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	while(*string > 0)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1de      	bne.n	800044e <LCD_write_string+0xe>
		}
	}
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <Enable_NVIC>:
										(x == GPIO_PORTD) ? 3 : 0	)


/* =========================================== Generic Functions ============================================================ */
void Enable_NVIC (uint16_t IRQ)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	2b0f      	cmp	r3, #15
 80004a6:	d854      	bhi.n	8000552 <Enable_NVIC+0xba>
 80004a8:	a201      	add	r2, pc, #4	; (adr r2, 80004b0 <Enable_NVIC+0x18>)
 80004aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ae:	bf00      	nop
 80004b0:	080004f1 	.word	0x080004f1
 80004b4:	080004ff 	.word	0x080004ff
 80004b8:	0800050d 	.word	0x0800050d
 80004bc:	0800051b 	.word	0x0800051b
 80004c0:	08000529 	.word	0x08000529
 80004c4:	08000537 	.word	0x08000537
 80004c8:	08000537 	.word	0x08000537
 80004cc:	08000537 	.word	0x08000537
 80004d0:	08000537 	.word	0x08000537
 80004d4:	08000537 	.word	0x08000537
 80004d8:	08000545 	.word	0x08000545
 80004dc:	08000545 	.word	0x08000545
 80004e0:	08000545 	.word	0x08000545
 80004e4:	08000545 	.word	0x08000545
 80004e8:	08000545 	.word	0x08000545
 80004ec:	08000545 	.word	0x08000545
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <Enable_NVIC+0xc4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <Enable_NVIC+0xc4>)
 80004f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fa:	6013      	str	r3, [r2, #0]
		break;
 80004fc:	e029      	b.n	8000552 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <Enable_NVIC+0xc4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <Enable_NVIC+0xc4>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	6013      	str	r3, [r2, #0]
		break;
 800050a:	e022      	b.n	8000552 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <Enable_NVIC+0xc4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <Enable_NVIC+0xc4>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
		break;
 8000518:	e01b      	b.n	8000552 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <Enable_NVIC+0xc4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <Enable_NVIC+0xc4>)
 8000520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000524:	6013      	str	r3, [r2, #0]
		break;
 8000526:	e014      	b.n	8000552 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <Enable_NVIC+0xc4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <Enable_NVIC+0xc4>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
		break;
 8000534:	e00d      	b.n	8000552 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <Enable_NVIC+0xc4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <Enable_NVIC+0xc4>)
 800053c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000540:	6013      	str	r3, [r2, #0]
		break;
 8000542:	e006      	b.n	8000552 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <Enable_NVIC+0xc8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <Enable_NVIC+0xc8>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
		break;
 8000550:	bf00      	nop
	}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	e000e100 	.word	0xe000e100
 8000560:	e000e104 	.word	0xe000e104

08000564 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d854      	bhi.n	800061e <Disable_NVIC+0xba>
 8000574:	a201      	add	r2, pc, #4	; (adr r2, 800057c <Disable_NVIC+0x18>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	080005bd 	.word	0x080005bd
 8000580:	080005cb 	.word	0x080005cb
 8000584:	080005d9 	.word	0x080005d9
 8000588:	080005e7 	.word	0x080005e7
 800058c:	080005f5 	.word	0x080005f5
 8000590:	08000603 	.word	0x08000603
 8000594:	08000603 	.word	0x08000603
 8000598:	08000603 	.word	0x08000603
 800059c:	08000603 	.word	0x08000603
 80005a0:	08000603 	.word	0x08000603
 80005a4:	08000611 	.word	0x08000611
 80005a8:	08000611 	.word	0x08000611
 80005ac:	08000611 	.word	0x08000611
 80005b0:	08000611 	.word	0x08000611
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000611 	.word	0x08000611
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <Disable_NVIC+0xc4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <Disable_NVIC+0xc4>)
 80005c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c6:	6013      	str	r3, [r2, #0]
			break;
 80005c8:	e029      	b.n	800061e <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <Disable_NVIC+0xc4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <Disable_NVIC+0xc4>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6013      	str	r3, [r2, #0]
			break;
 80005d6:	e022      	b.n	800061e <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <Disable_NVIC+0xc4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <Disable_NVIC+0xc4>)
 80005de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e2:	6013      	str	r3, [r2, #0]
			break;
 80005e4:	e01b      	b.n	800061e <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <Disable_NVIC+0xc4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <Disable_NVIC+0xc4>)
 80005ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f0:	6013      	str	r3, [r2, #0]
			break;
 80005f2:	e014      	b.n	800061e <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <Disable_NVIC+0xc4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <Disable_NVIC+0xc4>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fe:	6013      	str	r3, [r2, #0]
			break;
 8000600:	e00d      	b.n	800061e <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <Disable_NVIC+0xc4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <Disable_NVIC+0xc4>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800060c:	6013      	str	r3, [r2, #0]
			break;
 800060e:	e006      	b.n	800061e <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <Disable_NVIC+0xc8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <Disable_NVIC+0xc8>)
 8000616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061a:	6013      	str	r3, [r2, #0]
			break;
 800061c:	bf00      	nop
		}

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e180 	.word	0xe000e180
 800062c:	e000e184 	.word	0xe000e184

08000630 <Update_EXTI>:




void Update_EXTI	(EXTI_PinConfig_t* EXTI_Config)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	// 1) Configure GPIO To Be Alternative Function Input (Floating Input)

	GPIO_PinConfig_t PinCfg;
	// Update The GPIO Pin To Be Floating Input
	PinCfg.GPIO_Pin_Number = EXTI_Config->EXTI_Pin.GPIO_Pin;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	891b      	ldrh	r3, [r3, #8]
 800063c:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE	  = GPIO_MODE_INPUT_FLOATING;
 800063e:	2301      	movs	r3, #1
 8000640:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinCfg);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa5e 	bl	8000b0e <MCAL_GPIO_Init>
	//=========================================================

	// 2) Update AFIO to Route between EXTI Line With Port A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.EXTI_InputLineNumber / 4;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	b29b      	uxth	r3, r3
 800065a:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber % 4) * 4;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0303 	and.w	r3, r3, #3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	73bb      	strb	r3, [r7, #14]

	// Clear The Four Bits First
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_Position);
 800066c:	4a61      	ldr	r2, [pc, #388]	; (80007f4 <Update_EXTI+0x1c4>)
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	3302      	adds	r3, #2
 8000672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	210f      	movs	r1, #15
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	495c      	ldr	r1, [pc, #368]	; (80007f4 <Update_EXTI+0x1c4>)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4002      	ands	r2, r0
 8000688:	3302      	adds	r3, #2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 800068e:	4a59      	ldr	r2, [pc, #356]	; (80007f4 <Update_EXTI+0x1c4>)
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	3302      	adds	r3, #2
 8000694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4956      	ldr	r1, [pc, #344]	; (80007f8 <Update_EXTI+0x1c8>)
 800069e:	428b      	cmp	r3, r1
 80006a0:	d016      	beq.n	80006d0 <Update_EXTI+0xa0>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4955      	ldr	r1, [pc, #340]	; (80007fc <Update_EXTI+0x1cc>)
 80006a8:	428b      	cmp	r3, r1
 80006aa:	d00f      	beq.n	80006cc <Update_EXTI+0x9c>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4953      	ldr	r1, [pc, #332]	; (8000800 <Update_EXTI+0x1d0>)
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d008      	beq.n	80006c8 <Update_EXTI+0x98>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4952      	ldr	r1, [pc, #328]	; (8000804 <Update_EXTI+0x1d4>)
 80006bc:	428b      	cmp	r3, r1
 80006be:	d101      	bne.n	80006c4 <Update_EXTI+0x94>
 80006c0:	2303      	movs	r3, #3
 80006c2:	e006      	b.n	80006d2 <Update_EXTI+0xa2>
 80006c4:	2300      	movs	r3, #0
 80006c6:	e004      	b.n	80006d2 <Update_EXTI+0xa2>
 80006c8:	2302      	movs	r3, #2
 80006ca:	e002      	b.n	80006d2 <Update_EXTI+0xa2>
 80006cc:	2301      	movs	r3, #1
 80006ce:	e000      	b.n	80006d2 <Update_EXTI+0xa2>
 80006d0:	2300      	movs	r3, #0
 80006d2:	7bb9      	ldrb	r1, [r7, #14]
 80006d4:	408b      	lsls	r3, r1
 80006d6:	4618      	mov	r0, r3
 80006d8:	4946      	ldr	r1, [pc, #280]	; (80007f4 <Update_EXTI+0x1c4>)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	4302      	orrs	r2, r0
 80006de:	3302      	adds	r3, #2
 80006e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=========================================================

	// 3) Update Rising / Falling Edge Register

	// Reset Bits Of Rising
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006e4:	4b48      	ldr	r3, [pc, #288]	; (8000808 <Update_EXTI+0x1d8>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a44      	ldr	r2, [pc, #272]	; (8000808 <Update_EXTI+0x1d8>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
	// Reset Bits Of Falling
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <Update_EXTI+0x1d8>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	8812      	ldrh	r2, [r2, #0]
 8000704:	4611      	mov	r1, r2
 8000706:	2201      	movs	r2, #1
 8000708:	408a      	lsls	r2, r1
 800070a:	43d2      	mvns	r2, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a3e      	ldr	r2, [pc, #248]	; (8000808 <Update_EXTI+0x1d8>)
 8000710:	400b      	ands	r3, r1
 8000712:	60d3      	str	r3, [r2, #12]

	// To Make An Update
	if (EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7b1b      	ldrb	r3, [r3, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10b      	bne.n	8000734 <Update_EXTI+0x104>
	{
		// Set Bits Of Rising
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <Update_EXTI+0x1d8>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	4611      	mov	r1, r2
 800072c:	4a36      	ldr	r2, [pc, #216]	; (8000808 <Update_EXTI+0x1d8>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6093      	str	r3, [r2, #8]
 8000732:	e029      	b.n	8000788 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7b1b      	ldrb	r3, [r3, #12]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10b      	bne.n	8000754 <Update_EXTI+0x124>
	{
		// Set Bits Of Falling
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <Update_EXTI+0x1d8>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <Update_EXTI+0x1d8>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]
 8000752:	e019      	b.n	8000788 <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Rising_And_Falling)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7b1b      	ldrb	r3, [r3, #12]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d115      	bne.n	8000788 <Update_EXTI+0x158>
	{
		// Set Both Bits Of Rising And Falling
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <Update_EXTI+0x1d8>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	4611      	mov	r1, r2
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <Update_EXTI+0x1d8>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <Update_EXTI+0x1d8>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	4611      	mov	r1, r2
 800077c:	2201      	movs	r2, #1
 800077e:	408a      	lsls	r2, r1
 8000780:	4611      	mov	r1, r2
 8000782:	4a21      	ldr	r2, [pc, #132]	; (8000808 <Update_EXTI+0x1d8>)
 8000784:	430b      	orrs	r3, r1
 8000786:	60d3      	str	r3, [r2, #12]
	}
	//=========================================================
	// 4) Update Interrupt Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <Update_EXTI+0x1dc>)
 8000794:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//=========================================================
	// 5) Enable/Disable IRQ EXTI & NVIC

	if (EXTI_Config->IRQ_Enable	== EXTI_IRQ_Enable)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7b5b      	ldrb	r3, [r3, #13]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d110      	bne.n	80007c2 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <Update_EXTI+0x1d8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	8812      	ldrh	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <Update_EXTI+0x1d8>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe6c 	bl	8000498 <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
		Disable_NVIC (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
	}

}
 80007c0:	e014      	b.n	80007ec <Update_EXTI+0x1bc>
	else if (EXTI_Config->IRQ_Enable == EXTI_IRQ_Disable)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b5b      	ldrb	r3, [r3, #13]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d110      	bne.n	80007ec <Update_EXTI+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <Update_EXTI+0x1d8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <Update_EXTI+0x1d8>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff febc 	bl	8000564 <Disable_NVIC>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40010000 	.word	0x40010000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40011000 	.word	0x40011000
 8000804:	40011400 	.word	0x40011400
 8000808:	40010400 	.word	0x40010400
 800080c:	20000024 	.word	0x20000024

08000810 <MCAL_EXTI_GPIO_Init>:
 * @Note						-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 Package has only GPIO A,B , Parts of C, D exported as External Pins from
 * 								- Also Mandatory To Enable RCC Clock for AFIO And The Corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init	(EXTI_PinConfig_t* EXTI_Config)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff09 	bl	8000630 <Update_EXTI>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <EXTI0_IRQHandler>:


/* ========================================================== ISR Functions ================================================ */
// EXTI0
void EXTI0_IRQHandler (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	// Clear By Writing "1" into the bit Pending Register (EXTI_PR)
	EXTI->PR |= 1 << 0;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <EXTI0_IRQHandler+0x1c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <EXTI0_IRQHandler+0x1c>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <EXTI0_IRQHandler+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4798      	blx	r3

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010400 	.word	0x40010400
 8000848:	20000024 	.word	0x20000024

0800084c <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	// Clear By Writing "1" into the bit Pending Register (EXTI_PR)
	EXTI->PR |= 1 << 1;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <EXTI1_IRQHandler+0x1c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <EXTI1_IRQHandler+0x1c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <EXTI1_IRQHandler+0x20>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4798      	blx	r3

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010400 	.word	0x40010400
 800086c:	20000024 	.word	0x20000024

08000870 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	// Clear By Writing "1" into the bit Pending Register (EXTI_PR)
	EXTI->PR |= 1 << 2;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <EXTI2_IRQHandler+0x1c>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <EXTI2_IRQHandler+0x1c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <EXTI2_IRQHandler+0x20>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	4798      	blx	r3

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010400 	.word	0x40010400
 8000890:	20000024 	.word	0x20000024

08000894 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	// Clear By Writing "1" into the bit Pending Register (EXTI_PR)
	EXTI->PR |= 1 << 3;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <EXTI3_IRQHandler+0x1c>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <EXTI3_IRQHandler+0x1c>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <EXTI3_IRQHandler+0x20>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4798      	blx	r3

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	20000024 	.word	0x20000024

080008b8 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	// Clear By Writing "1" into the bit Pending Register (EXTI_PR)
	EXTI->PR |= 1 << 4;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <EXTI4_IRQHandler+0x1c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <EXTI4_IRQHandler+0x1c>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <EXTI4_IRQHandler+0x20>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	4798      	blx	r3

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010400 	.word	0x40010400
 80008d8:	20000024 	.word	0x20000024

080008dc <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{	EXTI->PR |= (1<<5)	; GP_IRQ_CallBack[5]()	;	}
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d008      	beq.n	80008fe <EXTI9_5_IRQHandler+0x22>
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	6153      	str	r3, [r2, #20]
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{	EXTI->PR |= (1<<6)	; GP_IRQ_CallBack[6]()	;	}
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	d008      	beq.n	800091c <EXTI9_5_IRQHandler+0x40>
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{	EXTI->PR |= (1<<7)	; GP_IRQ_CallBack[7]()	;	}
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <EXTI9_5_IRQHandler+0x5e>
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000932:	6153      	str	r3, [r2, #20]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{	EXTI->PR |= (1<<8)	; GP_IRQ_CallBack[8]()	;	}
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <EXTI9_5_IRQHandler+0x7c>
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800094c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{	EXTI->PR |= (1<<9)	; GP_IRQ_CallBack[9]()	;	}
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI9_5_IRQHandler+0x9a>
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	6153      	str	r3, [r2, #20]
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000974:	4798      	blx	r3
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400
 8000980:	20000024 	.word	0x20000024

08000984 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{	EXTI->PR |= (1<<10)	; GP_IRQ_CallBack[10]()	;	}
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000990:	2b00      	cmp	r3, #0
 8000992:	d008      	beq.n	80009a6 <EXTI15_10_IRQHandler+0x22>
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6153      	str	r3, [r2, #20]
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{	EXTI->PR |= (1<<11)	; GP_IRQ_CallBack[11]()	;	}
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <EXTI15_10_IRQHandler+0x40>
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{	EXTI->PR |= (1<<12)	; GP_IRQ_CallBack[12]()	;	}
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <EXTI15_10_IRQHandler+0x5e>
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009da:	6153      	str	r3, [r2, #20]
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{	EXTI->PR |= (1<<13)	; GP_IRQ_CallBack[13]()	;	}
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <EXTI15_10_IRQHandler+0x7c>
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{	EXTI->PR |= (1<<14)	; GP_IRQ_CallBack[14]()	;	}
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d008      	beq.n	8000a1e <EXTI15_10_IRQHandler+0x9a>
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6153      	str	r3, [r2, #20]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 8000a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1c:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{	EXTI->PR |= (1<<15)	; GP_IRQ_CallBack[15]()	;	}
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <EXTI15_10_IRQHandler+0xb8>
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	4798      	blx	r3
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010400 	.word	0x40010400
 8000a44:	20000024 	.word	0x20000024

08000a48 <Get_CRLH_Position>:

#include "STM32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	2b80      	cmp	r3, #128	; 0x80
 8000a56:	d042      	beq.n	8000ade <Get_CRLH_Position+0x96>
 8000a58:	2b80      	cmp	r3, #128	; 0x80
 8000a5a:	dc11      	bgt.n	8000a80 <Get_CRLH_Position+0x38>
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d036      	beq.n	8000ace <Get_CRLH_Position+0x86>
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	dc06      	bgt.n	8000a72 <Get_CRLH_Position+0x2a>
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d02e      	beq.n	8000ac6 <Get_CRLH_Position+0x7e>
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d02e      	beq.n	8000aca <Get_CRLH_Position+0x82>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d028      	beq.n	8000ac2 <Get_CRLH_Position+0x7a>
 8000a70:	e047      	b.n	8000b02 <Get_CRLH_Position+0xba>
 8000a72:	2b20      	cmp	r3, #32
 8000a74:	d02f      	beq.n	8000ad6 <Get_CRLH_Position+0x8e>
 8000a76:	2b40      	cmp	r3, #64	; 0x40
 8000a78:	d02f      	beq.n	8000ada <Get_CRLH_Position+0x92>
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d029      	beq.n	8000ad2 <Get_CRLH_Position+0x8a>
 8000a7e:	e040      	b.n	8000b02 <Get_CRLH_Position+0xba>
 8000a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a84:	d033      	beq.n	8000aee <Get_CRLH_Position+0xa6>
 8000a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a8a:	dc09      	bgt.n	8000aa0 <Get_CRLH_Position+0x58>
 8000a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a90:	d029      	beq.n	8000ae6 <Get_CRLH_Position+0x9e>
 8000a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a96:	d028      	beq.n	8000aea <Get_CRLH_Position+0xa2>
 8000a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9c:	d021      	beq.n	8000ae2 <Get_CRLH_Position+0x9a>
 8000a9e:	e030      	b.n	8000b02 <Get_CRLH_Position+0xba>
 8000aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa4:	d027      	beq.n	8000af6 <Get_CRLH_Position+0xae>
 8000aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aaa:	dc03      	bgt.n	8000ab4 <Get_CRLH_Position+0x6c>
 8000aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ab0:	d01f      	beq.n	8000af2 <Get_CRLH_Position+0xaa>
 8000ab2:	e026      	b.n	8000b02 <Get_CRLH_Position+0xba>
 8000ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ab8:	d01f      	beq.n	8000afa <Get_CRLH_Position+0xb2>
 8000aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000abe:	d01e      	beq.n	8000afe <Get_CRLH_Position+0xb6>
 8000ac0:	e01f      	b.n	8000b02 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;  // 0, 1: MODE . 2, 3: CNF
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e01e      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;  // 4, 5: MODE . 6, 7: CNF
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e01c      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000aca:	2308      	movs	r3, #8
 8000acc:	e01a      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	e018      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	e016      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	e014      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000ada:	2318      	movs	r3, #24
 8000adc:	e012      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000ade:	231c      	movs	r3, #28
 8000ae0:	e010      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e00e      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	e00c      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000aea:	2308      	movs	r3, #8
 8000aec:	e00a      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000aee:	230c      	movs	r3, #12
 8000af0:	e008      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000af2:	2310      	movs	r3, #16
 8000af4:	e006      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000af6:	2314      	movs	r3, #20
 8000af8:	e004      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000afa:	2318      	movs	r3, #24
 8000afc:	e002      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000afe:	231c      	movs	r3, #28
 8000b00:	e000      	b.n	8000b04 <Get_CRLH_Position+0xbc>
		break;

	}

	return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <MCAL_GPIO_Init>:
 * @return value    -None
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 has only GPIO A,B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIO_PortX, GPIO_PinConfig_t* PinConfig)
{
 8000b0e:	b590      	push	{r4, r7, lr}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	//Port configuration register high(GPIOx_CRH) Configure PINs from 8 >>> 15

	volatile uint32_t* ConfigRegister = NULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_Pin_Number < GPIO_PIN_8)? &GPIO_PortX->CRL   : &GPIO_PortX->CRH;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	d801      	bhi.n	8000b2c <MCAL_GPIO_Init+0x1e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	e001      	b.n	8000b30 <MCAL_GPIO_Init+0x22>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]

	//clear MODE, CNF
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_Pin_Number));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff86 	bl	8000a48 <Get_CRLH_Position>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4093      	lsls	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	d00f      	beq.n	8000b78 <MCAL_GPIO_Init+0x6a>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b06      	cmp	r3, #6
 8000b5e:	d00b      	beq.n	8000b78 <MCAL_GPIO_Init+0x6a>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d007      	beq.n	8000b78 <MCAL_GPIO_Init+0x6a>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	2b05      	cmp	r3, #5
 8000b6e:	d003      	beq.n	8000b78 <MCAL_GPIO_Init+0x6a>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	789b      	ldrb	r3, [r3, #2]
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d10e      	bne.n	8000b96 <MCAL_GPIO_Init+0x88>
	{
		//Set MODE, CNF
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	3b04      	subs	r3, #4
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	78db      	ldrb	r3, [r3, #3]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e02c      	b.n	8000bf0 <MCAL_GPIO_Init+0xe2>
	}
	//if Pin is input
	else  // MODE = 00: Input mode (reset state)
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d003      	beq.n	8000ba6 <MCAL_GPIO_Init+0x98>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <MCAL_GPIO_Init+0xa8>
		{
			//Set MODE 00, CNF
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0X0) & 0x0F);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e01c      	b.n	8000bf0 <MCAL_GPIO_Init+0xe2>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //Consider it as input floating
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	2b08      	cmp	r3, #8
 8000bbc:	d102      	bne.n	8000bc4 <MCAL_GPIO_Init+0xb6>
		{
			//Set MODE 00, CNF
			PIN_Config = ((((GPIO_MODE_INPUT_FLOATING) << 2) | 0X0) & 0x0F);
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e015      	b.n	8000bf0 <MCAL_GPIO_Init+0xe2>
		}
		else  //PU PD Input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PUR) << 2) | 0X0) & 0x0F);
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PUR)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d107      	bne.n	8000be0 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR |= PinConfig->GPIO_Pin_Number;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	e007      	b.n	8000bf0 <MCAL_GPIO_Init+0xe2>
			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR &= ~(PinConfig->GPIO_Pin_Number);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	8812      	ldrh	r2, [r2, #0]
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60da      	str	r2, [r3, #12]

		}

	}
	//Write on the CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Number) );
 8000bf0:	7bfc      	ldrb	r4, [r7, #15]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff26 	bl	8000a48 <Get_CRLH_Position>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	fa04 f203 	lsl.w	r2, r4, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	431a      	orrs	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <MCAL_GPIO_WritePin>:
 * @parameter[in]   -Value: Pin Value
 * @return value    -None
 * Note				-None
 */
void MCAL_GPIO_WritePin  (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber, uint8_t Value)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
 8000c20:	4613      	mov	r3, r2
 8000c22:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y = 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIO_PortX->BSRR = (uint32_t)PinNumber;
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIO_PortX->BRR = (uint32_t)PinNumber;
	}

}
 8000c30:	e002      	b.n	8000c38 <MCAL_GPIO_WritePin+0x24>
		GPIO_PortX->BRR = (uint32_t)PinNumber;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	615a      	str	r2, [r3, #20]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <MCAL_GPIO_WritePort>:
 * @parameter[in]	-GPIO_PortX: where X can be (A..E depending on device used) to select the GPIO peripheral
 * @return value    -None
 * Note				-None
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIO_PortX, uint16_t Value)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
	GPIO_PortX->ODR = (uint32_t)Value;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
	...

08000c60 <main>:
 */
void EXTI9_CallBack(void);

/* ==================================== Main Program ======================================= */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
	// Enable Clock
	RCC_GPIO_PORTA_CLK_EN();					// Enable Clock For Port A
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <main+0x74>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <main+0x74>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6193      	str	r3, [r2, #24]
	RCC_GPIO_PORTB_CLK_EN();					// Enable Clock For Port B
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <main+0x74>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <main+0x74>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();							// Enable Clock For AFIO
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <main+0x74>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <main+0x74>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6193      	str	r3, [r2, #24]

	// Initialize LCD
	LCD_init();
 8000c8a:	f7ff fb7b 	bl	8000384 <LCD_init>
	// Clear LCD Screen
	LCD_clear_screen();
 8000c8e:	f7ff fb37 	bl	8000300 <LCD_clear_screen>
	EXTI_PinConfig_t	EXTI_Cfg;

	// User Make Configuration To The EXTI Using @ref
	// It uses @ref Instead of Defining Each Member Of The Structure
	// This Helps To Avoid MisMatch of Input lines with Ports Pins
	EXTI_Cfg.EXTI_Pin = EXTI9_PB9;
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <main+0x78>)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Trigger Case Of Interrupt ---> Set To Rising
	EXTI_Cfg.Trigger_Case = EXTI_Trigger_Rising;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	743b      	strb	r3, [r7, #16]

	//CallBack Of Interrupt
	EXTI_Cfg.P_IRQ_CallBack = EXTI9_CallBack;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <main+0x7c>)
 8000ca2:	617b      	str	r3, [r7, #20]

	// Enable External Interrupt Requests
	EXTI_Cfg.IRQ_Enable = EXTI_IRQ_Enable;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_Cfg);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fdb0 	bl	8000810 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <main+0x80>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if (IRQ_Flag)
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <main+0x80>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <main+0x68>
		{
			LCD_clear_screen();
 8000cbe:	f7ff fb1f 	bl	8000300 <LCD_clear_screen>
			IRQ_Flag = 0;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <main+0x80>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
		}

		delay_ms(1000);
 8000cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ccc:	f7ff fa50 	bl	8000170 <delay_ms>
		if (IRQ_Flag)
 8000cd0:	e7f1      	b.n	8000cb6 <main+0x56>
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	08000dbc 	.word	0x08000dbc
 8000cdc:	08000ce5 	.word	0x08000ce5
 8000ce0:	2000001c 	.word	0x2000001c

08000ce4 <EXTI9_CallBack>:
 * ======================================
 * 		CallBack Functions Definitions
 * 	=====================================
 */
void EXTI9_CallBack(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <EXTI9_CallBack+0x1c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
	LCD_write_string("IRQ EXTI9 has happened _|- ");
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <EXTI9_CallBack+0x20>)
 8000cf0:	f7ff fba6 	bl	8000440 <LCD_write_string>
	delay_ms(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf8:	f7ff fa3a 	bl	8000170 <delay_ms>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	08000dc8 	.word	0x08000dc8

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 f811 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff ff91 	bl	8000c60 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d4c:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 8000d50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d54:	20000060 	.word	0x20000060

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	2500      	movs	r5, #0
 8000d60:	4e0c      	ldr	r6, [pc, #48]	; (8000d94 <__libc_init_array+0x38>)
 8000d62:	4c0d      	ldr	r4, [pc, #52]	; (8000d98 <__libc_init_array+0x3c>)
 8000d64:	1ba4      	subs	r4, r4, r6
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	f000 f81a 	bl	8000da4 <_init>
 8000d70:	2500      	movs	r5, #0
 8000d72:	4e0a      	ldr	r6, [pc, #40]	; (8000d9c <__libc_init_array+0x40>)
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <__libc_init_array+0x44>)
 8000d76:	1ba4      	subs	r4, r4, r6
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d84:	4798      	blx	r3
 8000d86:	3501      	adds	r5, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d8e:	4798      	blx	r3
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000de4 	.word	0x08000de4
 8000d98:	08000de4 	.word	0x08000de4
 8000d9c:	08000de4 	.word	0x08000de4
 8000da0:	08000de8 	.word	0x08000de8

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
