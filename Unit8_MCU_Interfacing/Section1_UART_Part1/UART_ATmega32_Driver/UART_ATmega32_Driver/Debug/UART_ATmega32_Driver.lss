
UART_ATmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b12  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005db  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000342  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  74:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LCD_kick>:

// Kick Start of LED
void LCD_kick(void)
{
	// Reset Enable bit
	LCD_CTRL_DATA_R |= (1<<ENABLE_SWITCH);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	83 ed       	ldi	r24, 0xD3	; 211
  84:	90 e3       	ldi	r25, 0x30	; 48
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_kick+0xa>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_kick+0x10>
  8c:	00 00       	nop
	
	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	_delay_ms(50);
	
	// Set Enable bit
	LCD_CTRL_DATA_R &= ~(1<<ENABLE_SWITCH);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <LCD_is_busy>:

// Check if LCD is Busy
void LCD_is_busy(void)
{
	// 1) Set Port to Receive Data ( input )
	LCD_PORT_DDR_R &= ~(0xFF<<DATA_SHIFT);
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	1a ba       	out	0x1a, r1	; 26
	
	// 2) Put LCD on Read Mode ( RW ON )
	LCD_CTRL_DATA_R |= (1<<RW_SWITCH);
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	88 bb       	out	0x18, r24	; 24
	
	// 3) Put LCD on Command Mode ( RS OFF )
	LCD_CTRL_DATA_R &= ~(1<<RS_SWITCH);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	8d 7f       	andi	r24, 0xFD	; 253
  a4:	88 bb       	out	0x18, r24	; 24
	
	LCD_kick();
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_kick>
	
	LCD_PORT_DDR_R |= (0xFF<<DATA_SHIFT);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL_DATA_R &= ~(1<<RW_SWITCH);	
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	08 95       	ret

000000b8 <LCD_write_command>:
}

// Function to write commands for LCD
void LCD_write_command(unsigned char command)
{	
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	/* ====== LCD is in 8 bit Mode ====== */
	#ifdef EIGHT_BIT_MODE
		// check if LCD is busy
		LCD_is_busy();
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_is_busy>
	
		// Set LCD Port using command variable
		LCD_PORT_DATA_R = command;
  c0:	cb bb       	out	0x1b, r28	; 27
	
		// Port Direction is set to Output in LCD_init()
	
		// Turn RW off so you can write
		// Turn RS off for command mode 
		LCD_CTRL_DATA_R &= ~((1<<RS_SWITCH) | (1<<RW_SWITCH));
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	89 7f       	andi	r24, 0xF9	; 249
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_write_command+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_write_command+0x1a>
  d2:	00 00       	nop
	
		_delay_ms(1);
		LCD_kick();	
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_kick>
		// Turn RW off so you can write
		// Turn RS off for command mode
		LCD_CTRL_DATA_R &= ~((1<<RW_SWITCH) | (1 << RS_SWITCH));
		LCD_kick();
	#endif
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_clear_screen>:
/* ========== Functions Defintions ========== */

// Function to clear screen
void LCD_clear_screen(void)
{
	LCD_write_command(LCD_CLEAR_SCREEN);  // LCD_CLEAR_SCREEN is a Macro
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
  e2:	08 95       	ret

000000e4 <LCD_goTo_XY_Axis>:
	// Set Enable bit
	LCD_CTRL_DATA_R &= ~(1<<ENABLE_SWITCH);
}

void LCD_goTo_XY_Axis(unsigned char line, unsigned char position)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	c8 2f       	mov	r28, r24
  ea:	d6 2f       	mov	r29, r22
	if (line == 1)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	31 f4       	brne	.+12     	; 0xfc <LCD_goTo_XY_Axis+0x18>
	{
		if (position < 16 && position >= 0)
  f0:	60 31       	cpi	r22, 0x10	; 16
  f2:	20 f4       	brcc	.+8      	; 0xfc <LCD_goTo_XY_Axis+0x18>
		{
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + position);
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	86 0f       	add	r24, r22
  f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
		}
	}
	if (line == 2)
  fc:	c2 30       	cpi	r28, 0x02	; 2
  fe:	31 f4       	brne	.+12     	; 0x10c <LCD_goTo_XY_Axis+0x28>
	{
		if (position < 32 && position >= 0)
 100:	d0 32       	cpi	r29, 0x20	; 32
 102:	20 f4       	brcc	.+8      	; 0x10c <LCD_goTo_XY_Axis+0x28>
		{
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + position);
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	8d 0f       	add	r24, r29
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
		}
		
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <LCD_init>:
 112:	87 e8       	ldi	r24, 0x87	; 135
 114:	93 e1       	ldi	r25, 0x13	; 19
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x4>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_init+0xa>
 11c:	00 00       	nop
	// Wait for more than 100microseconds
	// Total = 20ms
	_delay_ms(20);
		
	// Turn OFF CTRL
	LCD_CTRL_DATA_R &= ~(1<<ENABLE_SWITCH | 1<<RW_SWITCH | 1<<RW_SWITCH);
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	83 7f       	andi	r24, 0xF3	; 243
 122:	88 bb       	out	0x18, r24	; 24
 124:	85 ea       	ldi	r24, 0xA5	; 165
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_init+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_init+0x1c>
 12e:	00 00       	nop
	
	_delay_ms(15);
	
	// Clear screen of the LCD
	LCD_clear_screen();
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_clear_screen>
	
	/* ======= LCD is in 8 bit Mode ======= */
	#ifdef EIGHT_BIT_MODE
	LCD_write_command(LCD_FUNCTION_8BIT_2LINES);
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
	#ifdef FOUR_BIT_MODE
	LCD_write_command(ENABLE_4BIT_MODE);
	LCD_write_command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_write_command(LCD_ENTRY_MODE);
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
	LCD_write_command(LCD_BEGIN_AT_FIRST_ROW);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
	LCD_write_command(LCD_DISP_ON_CURSOR_BLINK);
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_write_command>
 14c:	08 95       	ret

0000014e <LCD_write_char>:
		LCD_kick();
	#endif
}

void LCD_write_char(unsigned char character)
{
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
	/* ========== LCD is in 8 bit Mode ========== */
	#ifdef EIGHT_BIT_MODE
		//Check if LCD is busy
		LCD_is_busy();
 152:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_is_busy>
	
		// Set LCD Port using data variable
		LCD_PORT_DATA_R = character;
 156:	cb bb       	out	0x1b, r28	; 27
	
		// Turn RW off so you can write
		LCD_CTRL_DATA_R &= ~(1<<RW_SWITCH);
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 bb       	out	0x18, r24	; 24
		// Turn RS on for data mode
		LCD_CTRL_DATA_R |= (1<<RS_SWITCH);    
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	82 60       	ori	r24, 0x02	; 2
 162:	88 bb       	out	0x18, r24	; 24
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_write_char+0x1a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_write_char+0x20>
 16e:	00 00       	nop
		_delay_ms(1);
		LCD_kick();
 170:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_kick>
		// Turn RW off so you can write
		LCD_CTRL_DATA_R &= ~(1<<RW_SWITCH);
		
		LCD_kick();
	#endif
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
#include "lcd.h"

uint8_t data = 0;
int main(void)
{
	LCD_init();	
 178:	0e 94 89 00 	call	0x112	; 0x112 <LCD_init>
	UART_Init();
 17c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Init>
	
	UART_Send('M');
 180:	8d e4       	ldi	r24, 0x4D	; 77
 182:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Send>
	UART_Send('y');
 186:	89 e7       	ldi	r24, 0x79	; 121
 188:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Send>
	UART_Send('M');
 18c:	8d e4       	ldi	r24, 0x4D	; 77
 18e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Send>
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_goTo_XY_Axis(0, 0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_goTo_XY_Axis>
		data = UART_Receive();
 19a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_Receive>
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LCD_write_char(data);
 1a2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_write_char>
 1a6:	f5 cf       	rjmp	.-22     	; 0x192 <main+0x1a>

000001a8 <UART_Init>:
#include "UART_ATmega32.h"

void UART_Init(void)
{
	/* ################### BaudRate ################# */
	UBRRL = 51;												// BaudRate to make the UART work on a speed of 9600 
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	89 b9       	out	0x09, r24	; 9
	CLEARBIT(UCSRA, U2X);									// To make the UART work on the normal speed mode 
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	8b b9       	out	0x0b, r24	; 11
	/* No parity Mode
	 * Data --> 8-bit ( Initial value by default )
	 */
	
	/* ################### Transmitter Enable ################ */
	SETBIT(UCSRB, TXEN);
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	8a b9       	out	0x0a, r24	; 10
	
	/* ################### Receiver Enable #################### */
	SETBIT(UCSRB, RXEN);
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	08 95       	ret

000001c0 <UART_Send>:
	
}

void UART_Send(uint8_t data)
{
	while(!READBIT(UCSRA, UDRE));								// Blocking till the UDRE register becomes empty
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <UART_Send>
	UDR = data;
 1c4:	8c b9       	out	0x0c, r24	; 12
 1c6:	08 95       	ret

000001c8 <UART_Receive>:
}

uint8_t UART_Receive(void)
{
	while(!READBIT(UCSRA, RXC));								// Blocking till the RXC ( Receive Completed ) flag is empty
 1c8:	5f 9b       	sbis	0x0b, 7	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <UART_Receive>
	return UDR;
 1cc:	8c b1       	in	r24, 0x0c	; 12
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
